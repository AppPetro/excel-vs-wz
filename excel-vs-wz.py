import streamlit as st
import pandas as pd
import tabula  # do konwersji PDF‚ÜíDataFrame
from io import BytesIO

st.set_page_config(
    page_title="üìã Por√≥wnywarka Zam√≥wienie ‚Üî WZ (PDF‚ÜíExcel)",
    layout="wide",
)

st.title("üìã Por√≥wnywarka Zam√≥wienie (Excel) vs. WZ (PDF lub Excel)")

st.markdown(
    """
    **Instrukcja:**
    1. Wgraj plik Excel z zam√≥wieniem, zawierajƒÖcy przynajmniej kolumny:
       - `Symbol` (EAN, np. 5029040012281)
       - `Ilo≈õƒá` (liczba zamawianych sztuk)
    2. Wgraj plik WZ w formacie **PDF** (lub, je≈õli wolisz, gotowy Excel z WZ), 
       zawierajƒÖcy przynajmniej kolumny:
       - `Kod produktu` (EAN)
       - `Ilo≈õƒá` (liczba wydanych sztuk w danym wierszu WZ)
    3. Aplikacja automatycznie:
       - skonwertuje PDF ‚Üí tabelƒô,
       - wyciƒÖgnie kolumny EAN (`Kod produktu`) i ilo≈õƒá,
       - zsumuje te ilo≈õci po EAN-ach,
       - por√≥wna z zam√≥wieniem i wygeneruje raport z r√≥≈ºnicƒÖ.
    """
)

st.sidebar.header("Krok 1: Wgraj plik ZAM√ìWIENIE (Excel)")
uploaded_order = st.sidebar.file_uploader(
    label="Wybierz plik Excel (zam√≥wienie)",
    type=["xlsx"],
    key="order_uploader"
)

st.sidebar.header("Krok 2: Wgraj plik WZ (PDF lub Excel)")
uploaded_wz = st.sidebar.file_uploader(
    label="Wybierz plik WZ (PDF lub Excel)",
    type=["pdf", "xlsx"],
    key="wz_uploader"
)

st.sidebar.markdown(
    """
    - Je≈õli wgrasz **PDF**, aplikacja u≈ºyje `tabula-py` do wyciƒÖgniƒôcia tabeli z kolumnami:
      `Kod produktu` (EAN) i `Ilo≈õƒá`.  
    - Je≈õli wgrasz **Excel** (plik ju≈º wyeksportowany rƒôcznie ze WZ‚Üí.xlsx), 
      aplikacja odczyta kolumny `Kod produktu` i `Ilo≈õƒá` bezpo≈õrednio.
    """
)

if uploaded_order is None or uploaded_wz is None:
    st.info("Proszƒô wgraƒá oba pliki po lewej stronie (zam√≥wienie i WZ).")
    st.stop()

# -----------------------------------
# 1) Przetwarzanie zam√≥wienia (Excel)
# -----------------------------------
try:
    df_order = pd.read_excel(uploaded_order, dtype={"Symbol": str})
except Exception as e:
    st.error(f"Nie uda≈Ço siƒô wczytaƒá pliku zam√≥wienia:\n```{e}```")
    st.stop()

# Sprawdzenie, czy kolumny istniejƒÖ
if "Symbol" not in df_order.columns or "Ilo≈õƒá" not in df_order.columns:
    st.error(
        "Plik ZAM√ìWIENIE musi mieƒá kolumny:\n"
        "- `Symbol` (EAN)\n"
        "- `Ilo≈õƒá` (liczba sztuk)\n\n"
        "Zweryfikuj, czy nag≈Ç√≥wki dok≈Çadnie tak siƒô nazywajƒÖ (wielko≈õƒá liter, spacje)."
    )
    st.stop()

# Oczyszczenie EAN-√≥w: usu≈Ñ spacje, sufiks ".0"
df_order["Symbol"] = (
    df_order["Symbol"]
    .astype(str)
    .str.strip()
    .str.replace(r"\.0+$", "", regex=True)
)
# Upewnij siƒô, ≈ºe Ilo≈õƒá jest numeric
df_order["Ilo≈õƒá"] = pd.to_numeric(df_order["Ilo≈õƒá"], errors="coerce").fillna(0)

# -----------------------------------
# 2) Przetwarzanie pliku WZ (PDF lub Excel)
# -----------------------------------
file_ext = uploaded_wz.name.lower().rsplit(".", maxsplit=1)[-1]

if file_ext == "pdf":
    # 2a) U≈ºywamy tabula-py, by wyciƒÖgnƒÖƒá wszystkie tabele z PDF
    #    Domy≈õlnie tabula.read_pdf zwraca listƒô DataFrame
    try:
        dfs_from_pdf = tabula.read_pdf(
            uploaded_wz,
            pages="all",
            multiple_tables=True,
            pandas_options={"dtype": str}
        )
    except Exception as e:
        st.error(f"Nie uda≈Ço siƒô odczytaƒá PDF-a przez tabula-py:\n```{e}```")
        st.stop()

    if len(dfs_from_pdf) == 0:
        st.error("Nie znaleziono ≈ºadnych tabel w pliku PDF WZ.")
        st.stop()

    # Po≈ÇƒÖcz wszystkie tabele w jeden DataFrame (vertical stack)
    df_wz_raw = pd.concat(dfs_from_pdf, ignore_index=True)

    # Zak≈Çadamy, ≈ºe po ekstrakcji z PDF mamy kolumny, kt√≥re zawierajƒÖ co najmniej:
    # - "Kod produktu" (EAN)
    # - "Ilo≈õƒá"
    # Je≈õli nazwy nag≈Ç√≥wk√≥w sƒÖ inne, spr√≥buj je zidentyfikowaƒá rƒôcznie.
    expected_cols = ["Kod produktu", "Ilo≈õƒá"]
    cols_lower = [col.lower() for col in df_wz_raw.columns]

    # Znajd≈∫, czy kt√≥rakolwiek kolumna zawiera frazƒô "kod" i "produkt"
    # oraz "ilo≈õƒá" (ignore case). Je≈õli nazwy trochƒô siƒô r√≥≈ºniƒÖ, dopasujemy.
    col_kod = None
    for col in df_wz_raw.columns:
        if "kod" in col.lower() and "produkt" in col.lower():
            col_kod = col
            break

    col_ilosc = None
    for col in df_wz_raw.columns:
        if "ilo" in col.lower():  # z≈Çap "Ilo≈õƒá", "IloÔøΩÔøΩƒá" itp.
            col_ilosc = col
            break

    if col_kod is None or col_ilosc is None:
        st.error(
            "Po ekstrakcji PDF nie uda≈Ço siƒô odnale≈∫ƒá kolumn:\n"
            "- `Kod produktu` (EAN)\n"
            "- `Ilo≈õƒá`\n\n"
            f"A zosta≈Çy znalezione kolumny:\n{list(df_wz_raw.columns)}\n\n"
            "Upewnij siƒô, ≈ºe PDF zawiera tabelƒô z odpowiednimi nag≈Ç√≥wkami."
        )
        st.stop()

    # Tworzymy nowy DataFrame z dw√≥ch wybranych kolumn
    df_wz = pd.DataFrame({
        "Symbol": df_wz_raw[col_kod].astype(str),
        "Ilo≈õƒá_WZ": df_wz_raw[col_ilosc]
    })

    # Oczyszczenie: usu≈Ñ spacje, sufiks ".0", przecinki w liczbach
    df_wz["Symbol"] = (
        df_wz["Symbol"]
        .str.strip()
        .str.replace(r"\.0+$", "", regex=True)
    )
    # Je≈õli Ilo≈õƒá_WZ to string z przecinkiem, zamie≈Ñ na float
    df_wz["Ilo≈õƒá_WZ"] = (
        df_wz["Ilo≈õƒá_WZ"]
        .astype(str)
        .str.replace(",", ".", regex=False)
        .str.replace(r"\s+", "", regex=True)  # usu≈Ñ ewentualne spacje wewnƒÖtrz "1 500"
        .astype(float, errors="ignore")
    )
    # Je≈õli kt√≥ra≈õ warto≈õƒá nie da siƒô skonwertowaƒá na float, nadaj 0
    df_wz["Ilo≈õƒá_WZ"] = pd.to_numeric(df_wz["Ilo≈õƒá_WZ"], errors="coerce").fillna(0)

else:
    # 2b) Je≈ºeli u≈ºytkownik wgra≈Ç gotowy Excel z WZ
    try:
        df_wz_raw = pd.read_excel(uploaded_wz, dtype={"Kod produktu": str})
    except Exception as e:
        st.error(f"Nie uda≈Ço siƒô wczytaƒá pliku WZ (Excel):\n```{e}```")
        st.stop()

    # Sprawdzenie kolumn
    if "Kod produktu" not in df_wz_raw.columns or "Ilo≈õƒá" not in df_wz_raw.columns:
        st.error(
            "Plik WZ (Excel) musi mieƒá kolumny:\n"
            "- `Kod produktu` (EAN)\n"
            "- `Ilo≈õƒá` (liczba sztuk w danym wierszu WZ)\n\n"
            f"A zosta≈Çy znalezione kolumny:\n{list(df_wz_raw.columns)}"
        )
        st.stop()

    df_wz = df_wz_raw.rename(columns={"Kod produktu": "Symbol", "Ilo≈õƒá": "Ilo≈õƒá_WZ"})

    # Oczyszczenie Symbol ‚Üí usu≈Ñ spacje, sufiks ".0"
    df_wz["Symbol"] = (
        df_wz["Symbol"]
        .astype(str)
        .str.strip()
        .str.replace(r"\.0+$", "", regex=True)
    )

    # Konwersja Ilo≈õƒá_WZ ‚Üí float (na wypadek, gdyby by≈Ço "150,00")
    df_wz["Ilo≈õƒá_WZ"] = (
        df_wz["Ilo≈õƒá_WZ"]
        .astype(str)
        .str.replace(",", ".", regex=False)
        .str.replace(r"\s+", "", regex=True)
        .astype(float, errors="ignore")
    )
    df_wz["Ilo≈õƒá_WZ"] = pd.to_numeric(df_wz["Ilo≈õƒá_WZ"], errors="coerce").fillna(0)

# -----------------------------------
# 3) Grupowanie po Symbol (EAN) ‚Äì sumowanie ilo≈õci
# -----------------------------------
df_order_grouped = (
    df_order
    .groupby("Symbol", as_index=False)
    .agg({"Ilo≈õƒá": "sum"})
    .rename(columns={"Ilo≈õƒá": "Zam√≥wiona_ilo≈õƒá"})
)

df_wz_grouped = (
    df_wz
    .groupby("Symbol", as_index=False)
    .agg({"Ilo≈õƒá_WZ": "sum"})
    .rename(columns={"Ilo≈õƒá_WZ": "Wydana_ilo≈õƒá"})
)

# -----------------------------------
# 4) Merge i por√≥wnanie
# -----------------------------------
df_compare = pd.merge(
    df_order_grouped,
    df_wz_grouped,
    on="Symbol",
    how="outer",
    indicator=True
)

df_compare["Zam√≥wiona_ilo≈õƒá"] = df_compare["Zam√≥wiona_ilo≈õƒá"].fillna(0)
df_compare["Wydana_ilo≈õƒá"]    = df_compare["Wydana_ilo≈õƒá"].fillna(0)

df_compare["R√≥≈ºnica"] = (
    df_compare["Zam√≥wiona_ilo≈õƒá"] - df_compare["Wydana_ilo≈õƒá"]
)

def status_row(row):
    if row["_merge"] == "left_only":
        return "Brak we WZ"
    elif row["_merge"] == "right_only":
        return "Brak w zam√≥wieniu"
    elif row["Zam√≥wiona_ilo≈õƒá"] == row["Wydana_ilo≈õƒá"]:
        return "OK"
    else:
        return "R√≥≈ºni siƒô"

df_compare["Status"] = df_compare.apply(status_row, axis=1)

# Posortuj (opcjonalnie najpierw "R√≥≈ºni siƒô", "Brak we WZ", "Brak w zam√≥wieniu", a na ko≈Ñcu "OK")
status_order = ["R√≥≈ºni siƒô", "Brak we WZ", "Brak w zam√≥wieniu", "OK"]
df_compare["Status"] = pd.Categorical(
    df_compare["Status"], categories=status_order, ordered=True
)
df_compare = df_compare.sort_values(["Status", "Symbol"])

# -----------------------------------
# 5) Wy≈õwietlenie i pobranie wyniku
# -----------------------------------
st.markdown("### üìä Wynik por√≥wnania")
st.dataframe(
    df_compare.style.format({
        "Zam√≥wiona_ilo≈õƒá": "{:.0f}",
        "Wydana_ilo≈õƒá": "{:.0f}",
        "R√≥≈ºnica": "{:.0f}"
    }),
    use_container_width=True
)

# Przygotuj plik do pobrania (.xlsx)
def to_excel(df: pd.DataFrame) -> bytes:
    output = BytesIO()
    writer = pd.ExcelWriter(output, engine="openpyxl")
    df.to_excel(writer, index=False, sheet_name="Por√≥wnanie")
    writer.save()
    return output.getvalue()

st.download_button(
    label="‚¨áÔ∏è Pobierz raport jako Excel",
    data=to_excel(df_compare),
    file_name="porownanie_order_vs_wz.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
)

st.success("‚úÖ Gotowe! Por√≥wnanie wykonane pomy≈õlnie.")

