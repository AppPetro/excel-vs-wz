import streamlit as st
import pandas as pd

st.set_page_config(
    page_title="Por√≥wnywarka Zam√≥wienie ‚Üî WZ",
    layout="wide",
)

st.title("üìã Por√≥wnywarka Zam√≥wienie (Excel) vs. WZ (Excel)")

st.markdown(
    """
    Ten prosty formularz pozwala wgraƒá:
    1. Excel z zam√≥wieniem (kolumny: `Symbol` [EAN] i `Ilo≈õƒá`),
    2. Excel z WZ (po konwersji z PDF, kolumny: `Kod produktu` [EAN] i `Ilo≈õƒá`).
    
    Aplikacja:
    - zsumuje ilo≈õƒá w obu plikach po kolumnie EAN,
    - por√≥wna, ile sztuk zam√≥wiono, a ile faktycznie wydano,
    - i wygeneruje tabelƒô z r√≥≈ºnicami i statusem ka≈ºdej pozycji.
    """
)

# -----------------------------------
# 1) FileUploader: wczytanie Excela
# -----------------------------------
st.sidebar.header("Wgraj pliki Excel")

uploaded_order = st.sidebar.file_uploader(
    label="Wybierz plik ZAM√ìWIENIE (xlsx)",
    type=["xlsx"],
    key="order_uploader"
)

uploaded_wz = st.sidebar.file_uploader(
    label="Wybierz plik WZ (xlsx)",
    type=["xlsx"],
    key="wz_uploader"
)

st.sidebar.markdown(
    """
    **Instrukcja:**
    - Najpierw przygotuj plik Excel z zam√≥wieniem (np. ‚ÄûMM do EPP.xlsx‚Äù), 
      w kt√≥rym sƒÖ przynajmniej kolumny:
      - `Symbol` (EAN, np. 5029040012281)
      - `Ilo≈õƒá` (liczba zamawianych sztuk)
    - Nastƒôpnie przygotuj plik Excel z WZ (po konwersji z PDF),
      w kt√≥rym sƒÖ przynajmniej kolumny:
      - `Kod produktu` (EAN)
      - `Ilo≈õƒá` (liczba wydanych sztuk w danym wierszu WZ)
    - Po wgraniu obu plik√≥w, aplikacja wyprodukuje por√≥wnanie.
    """
)

# -----------------------------------
# 2) Gdy oba pliki wgrane ‚Äì wykonaj analizƒô
# -----------------------------------
if uploaded_order is not None and uploaded_wz is not None:
    try:
        # 2a) Wczytanie zam√≥wienia
        df_order = pd.read_excel(uploaded_order, dtype={"Symbol": str})
        # Upewniamy siƒô, ≈ºe mamy kolumny z odpowiednimi nazwami:
        if "Symbol" not in df_order.columns or "Ilo≈õƒá" not in df_order.columns:
            st.error(
                "Plik zam√≥wienia musi mieƒá kolumny: "
                "`Symbol` (EAN) oraz `Ilo≈õƒá` (ilo≈õƒá sztuk)."
            )
            st.stop()

        # Oczyszczenie EAN-√≥w (usu≈Ñ spacje i ko≈Ñc√≥wki ‚Äû.0‚Äù)
        df_order["Symbol"] = (
            df_order["Symbol"]
            .astype(str)
            .str.strip()
            .str.replace(r"\.0+$", "", regex=True)
        )
        df_order["Ilo≈õƒá"] = pd.to_numeric(df_order["Ilo≈õƒá"], errors="coerce").fillna(0)

        # 2b) Wczytanie WZ
        df_wz = pd.read_excel(uploaded_wz, dtype={"Kod produktu": str})
        # Sprawd≈∫ nazwy kolumn:
        if "Kod produktu" not in df_wz.columns or "Ilo≈õƒá" not in df_wz.columns:
            st.error(
                "Plik WZ musi mieƒá kolumny: "
                "`Kod produktu` (EAN) oraz `Ilo≈õƒá` (ilo≈õƒá sztuk w danym wierszu WZ)."
            )
            st.stop()

        # Zmieniamy nazwy kolumn w WZ, aby pasowa≈Çy do df_order
        df_wz = df_wz.rename(columns={"Kod produktu": "Symbol", "Ilo≈õƒá": "Ilo≈õƒá_WZ"})
        df_wz["Symbol"] = (
            df_wz["Symbol"]
            .astype(str)
            .str.strip()
            .str.replace(r"\.0+$", "", regex=True)
        )
        # Je≈õli w kolumnie Ilo≈õƒá_WZ sƒÖ przecinki (‚Äû150,00‚Äù), zamie≈Ñ na kropkƒô i na float:
        df_wz["Ilo≈õƒá_WZ"] = (
            df_wz["Ilo≈õƒá_WZ"]
            .astype(str)
            .str.replace(",", ".", regex=False)
            .astype(float)
            .fillna(0)
        )

        # -----------------------------------
        # 3) Grupowanie po EAN-ach (sumowanie ilo≈õci)
        # -----------------------------------
        # Dla zam√≥wienia:
        df_order_grouped = (
            df_order
            .groupby("Symbol", as_index=False)
            .agg({"Ilo≈õƒá": "sum"})
            .rename(columns={"Ilo≈õƒá": "Zam√≥wiona_ilo≈õƒá"})
        )

        # Dla WZ:
        df_wz_grouped = (
            df_wz
            .groupby("Symbol", as_index=False)
            .agg({"Ilo≈õƒá_WZ": "sum"})
            .rename(columns={"Ilo≈õƒá_WZ": "Wydana_ilo≈õƒá"})
        )

        # -----------------------------------
        # 4) Po≈ÇƒÖczenie (merge) i obliczenie r√≥≈ºnic
        # -----------------------------------
        df_compare = pd.merge(
            df_order_grouped,
            df_wz_grouped,
            on="Symbol",
            how="outer",
            indicator=True
        )

        # Uzupe≈Çnij 0 tam, gdzie brakuje warto≈õci
        df_compare["Zam√≥wiona_ilo≈õƒá"] = df_compare["Zam√≥wiona_ilo≈õƒá"].fillna(0)
        df_compare["Wydana_ilo≈õƒá"]    = df_compare["Wydana_ilo≈õƒá"].fillna(0)

        # Oblicz r√≥≈ºnicƒô
        df_compare["R√≥≈ºnica"] = (
            df_compare["Zam√≥wiona_ilo≈õƒá"] - df_compare["Wydana_ilo≈õƒá"]
        )

        # Dodaj kolumnƒô Status
        def status_row(row):
            if row["_merge"] == "left_only":
                return "Brak we WZ"
            elif row["_merge"] == "right_only":
                return "Brak w zam√≥wieniu"
            elif row["Zam√≥wiona_ilo≈õƒá"] == row["Wydana_ilo≈õƒá"]:
                return "OK"
            else:
                return "R√≥≈ºni siƒô"

        df_compare["Status"] = df_compare.apply(status_row, axis=1)

        # Posortuj (opcjonalnie najpierw b≈Çƒôdy, potem OK)
        status_order = ["R√≥≈ºni siƒô", "Brak we WZ", "Brak w zam√≥wieniu", "OK"]
        df_compare["Status"] = pd.Categorical(
            df_compare["Status"], categories=status_order, ordered=True
        )
        df_compare = df_compare.sort_values(["Status", "Symbol"])

        # -----------------------------------
        # 5) Wy≈õwietlenie wyniku w Streamlit
        # -----------------------------------
        st.markdown("### üìä Wynik por√≥wnania")
        st.dataframe(
            df_compare.style.format({
                "Zam√≥wiona_ilo≈õƒá": "{:.0f}",
                "Wydana_ilo≈õƒá": "{:.0f}",
                "R√≥≈ºnica": "{:.0f}"
            }),
            use_container_width=True
        )

        # 5a) Daj mo≈ºliwo≈õƒá pobrania raportu jako Excel
        def to_excel(df: pd.DataFrame) -> bytes:
            """Zwraca bajty pliku .xlsx z pandas DataFrame."""
            from io import BytesIO
            output = BytesIO()
            writer = pd.ExcelWriter(output, engine="openpyxl")
            df.to_excel(writer, index=False, sheet_name="Por√≥wnanie")
            writer.save()
            return output.getvalue()

        st.download_button(
            label="‚¨áÔ∏è Pobierz raport jako Excel",
            data=to_excel(df_compare),
            file_name="porownanie_order_vs_wz.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )

    except Exception as e:
        st.error(f"WystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania danych:\n```{e}```")
        st.stop()
else:
    st.info("Proszƒô wgraƒá oba pliki Excel po lewej stronie (zam√≥wienie i WZ).")
