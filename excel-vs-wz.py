import streamlit as st
import pandas as pd
import pdfplumber
from io import BytesIO
import re

st.set_page_config(
    page_title="üìã Por√≥wnywarka Zlecenie/Zam√≥wienie ‚Üî WZ (PDF/Excel)",
    layout="wide",
)

st.title("üìã Por√≥wnywarka Zlecenie/Zam√≥wienie (PDF/Excel) vs. WZ (PDF/Excel)")
st.markdown(
    """
    **Instrukcja:**
    1. Wgraj Zlecenie/Zam√≥wienie (PDF lub Excel), zawierajƒÖce kolumny EAN i ilo≈õci.
    2. Wgraj WZ (PDF lub Excel), gdzie kolumna EAN mo≈ºe siƒô nazywaƒá:
       - `Kod produktu`, `EAN`, `symbol`
       - Ilo≈õƒá: `Ilo≈õƒá`, `Ilosc`, `Quantity`, `Qty`
    3. Program przetworzy oba pliki (PDF regex lub Excel kolumny), zsumuje ilo≈õci po EAN-ach i por√≥wna.
    """
)

def highlight_status_row(row):
    color = "#c6efce" if row["Status"] == "OK" else "#ffc7ce"
    return [f"background-color: {color}" for _ in row.index]

def normalize_col_name(name: str) -> str:
    return name.lower().replace(" ", "").replace("\xa0", "").replace("_", "")

# 1) Wgrywanie plik√≥w
st.sidebar.header("Krok 1: Zlecenie/Zam√≥wienie (PDF lub Excel)")
uploaded_order = st.sidebar.file_uploader("Wybierz plik Zlecenia/Zam√≥wienia", type=["xlsx", "pdf"])
st.sidebar.header("Krok 2: WZ (PDF lub Excel)")
uploaded_wz = st.sidebar.file_uploader("Wybierz plik WZ", type=["xlsx", "pdf"])

if not uploaded_order or not uploaded_wz:
    st.info("Proszƒô wgraƒá oba pliki: Zlecenie/Zam√≥wienie oraz WZ.")
    st.stop()

# 2) Parsowanie Zlecenia/Zam√≥wienia
ext_order = uploaded_order.name.lower().rsplit(".", 1)[-1]
if ext_order == "pdf":
    ord_rows = []
    try:
        with pdfplumber.open(uploaded_order) as pdf:
            for page in pdf.pages:
                text = page.extract_text() or ""
                for line in text.split("\n"):
                    m = re.match(r"\s*\d+\s+(\d{13})\s+.*?\s+([\d\s]+,\d{2})$", line)
                    if not m:
                        continue
                    raw_ean, raw_q = m.group(1), m.group(2)
                    raw_qty = raw_q.replace(" ", "").replace(",", ".")
                    try:
                        qty = float(raw_qty)
                    except:
                        qty = 0.0
                    ord_rows.append([raw_ean, qty])
        if not ord_rows:
            st.error("Nie znaleziono danych w PDF Zlecenia/Zam√≥wienia.")
            st.stop()
        df_order = pd.DataFrame(ord_rows, columns=["Symbol", "Ilo≈õƒá"]).astype({"Symbol": str, "Ilo≈õƒá": float})
    except Exception as e:
        st.error(f"B≈ÇƒÖd przetwarzania PDF Zlecenia/Zam√≥wienia:\n```{e}```")
        st.stop()
else:
    try:
        df_order_raw = pd.read_excel(uploaded_order, dtype=str)
    except Exception as e:
        st.error(f"B≈ÇƒÖd wczytywania Excela Zlecenia/Zam√≥wienia:\n```{e}```")
        st.stop()
    syn_ean_ord = {normalize_col_name(c): c for c in ["Symbol","symbol","kod ean","ean","kod produktu"]}
    syn_qty_ord = {normalize_col_name(c): c for c in ["Ilo≈õƒá","Ilosc","Quantity","Qty","sztuki"]}
    def find_col(df, syns):
        for c in df.columns:
            if normalize_col_name(c) in syns:
                return c
        return None
    col_ean_order = find_col(df_order_raw, syn_ean_ord)
    col_qty_order = find_col(df_order_raw, syn_qty_ord)
    if not col_ean_order or not col_qty_order:
        st.error("Excel Zlecenia/Zam√≥wienia musi mieƒá kolumny EAN i Ilo≈õƒá. Znalezione: {list(df_order_raw.columns)}")
        st.stop()
    df_order = pd.DataFrame({
        "Symbol": df_order_raw[col_ean_order].astype(str).str.strip().str.replace(r"\.0+$", "", regex=True),
        "Ilo≈õƒá": pd.to_numeric(df_order_raw[col_qty_order].astype(str).str.replace(r"\s+", "", regex=True).str.replace(",", "."), errors="coerce").fillna(0)
    })

# 3) Parsowanie WZ
ext_wz = uploaded_wz.name.lower().rsplit(".", 1)[-1]
if ext_wz == "pdf":
    wz_rows = []
    try:
        with pdfplumber.open(uploaded_wz) as pdf:
            for page in pdf.pages:
                text = page.extract_text() or ""
                for line in text.split("\n"):
                    m = re.match(r"\s*\d+\s+(\d{13})\s+.*?\s+([\d\s]+,\d{2})\s+[\d\s]+,\d{2}$", line)
                    if not m:
                        continue
                    raw_ean, raw_q = m.group(1), m.group(2)
                    raw_qty = raw_q.replace(" ", "").replace(",", ".")
                    try:
                        qty = float(raw_qty)
                    except:
                        qty = 0.0
                    wz_rows.append([raw_ean, qty])
        if not wz_rows:
            st.error("Nie znaleziono danych w PDF WZ.")
            st.stop()
        df_wz = pd.DataFrame(wz_rows, columns=["Symbol", "Ilo≈õƒá_WZ"]).astype({"Symbol": str, "Ilo≈õƒá_WZ": float})
    except Exception as e:
        st.error(f"B≈ÇƒÖd przetwarzania PDF WZ:\n```{e}```")
        st.stop()
else:
    try:
        df_wz_raw = pd.read_excel(uploaded_wz, dtype=str)
    except Exception as e:
        st.error(f"B≈ÇƒÖd wczytywania Excela WZ:\n```{e}```")
        st.stop()
    syn_ean_wz = {normalize_col_name(c): c for c in ["Kod produktu","EAN","symbol"]}
    syn_qty_wz = {normalize_col_name(c): c for c in ["Ilo≈õƒá","Ilosc","Quantity","Qty"]}
    col_ean_wz = find_col(df_wz_raw, syn_ean_wz)
    col_qty_wz = find_col(df_wz_raw, syn_qty_wz)
    if not col_ean_wz or not col_qty_wz:
        st.error(f"Excel WZ musi mieƒá kolumny EAN i Ilo≈õƒá. Znalezione: {list(df_wz_raw.columns)}")
        st.stop()
    df_wz = pd.DataFrame({
        "Symbol": df_wz_raw[col_ean_wz].astype(str).str.strip().str.split().str[-1],
        "Ilo≈õƒá_WZ": pd.to_numeric(df_wz_raw[col_qty_wz].astype(str).str.replace(r"\s+", "", regex=True).str.replace(",", "."), errors="coerce").fillna(0)
    })

# 4) Grupowanie, sumowanie, por√≥wnanie i wy≈õwietlenie
# Grupowanie
 df_ord_g = df_order.groupby("Symbol", as_index=False).agg({"Ilo≈õƒá": "sum"}).rename(columns={"Ilo≈õƒá": "Zam√≥wiona_ilo≈õƒá"})
 df_wz_g  = df_wz.groupby("Symbol",    as_index=False).agg({"Ilo≈õƒá_WZ": "sum"}).rename(columns={"Ilo≈õƒá_WZ": "Wydana_ilo≈õƒá"})

# Por√≥wnanie
 df_cmp = pd.merge(df_ord_g, df_wz_g, on="Symbol", how="outer", indicator=True)
 df_cmp["Zam√≥wiona_ilo≈õƒá"] = df_cmp["Zam√≥wiona_ilo≈õƒá"].fillna(0)
 df_cmp["Wydana_ilo≈õƒá"]    = df_cmp["Wydana_ilo≈õƒá"].fillna(0)
 df_cmp["R√≥≈ºnica"]         = df_cmp["Zam√≥wiona_ilo≈õƒá"] - df_cmp["Wydana_ilo≈õƒá"]

 def status(r):
     if r["_merge"] == "left_only":  return "Brak we WZ"
     if r["_merge"] == "right_only": return "Brak w zam√≥wieniu"
     return "OK" if r["R√≥≈ºnica"] == 0 else "R√≥≈ºni siƒô"

 df_cmp["Status"] = df_cmp.apply(status, axis=1)
 order_stats = ["R√≥≈ºni siƒô", "Brak we WZ", "Brak w zam√≥wieniu", "OK"]
 df_cmp["Status"] = pd.Categorical(df_cmp["Status"], categories=order_stats, ordered=True)
 df_cmp = df_cmp.sort_values(["Status", "Symbol"])

# Wy≈õwietlenie i eksport\ n
 st.markdown("### üìä Wynik por√≥wnania")
 st.dataframe(df_cmp.style.format({"Zam√≥wiona_ilo≈õƒá": "{:.0f}", "Wydana_ilo≈õƒá": "{:.0f}", "R√≥≈ºnica": "{:.0f}"}).apply(highlight_status_row, axis=1), use_container_width=True)
 
 out = BytesIO()
 writer = pd.ExcelWriter(out, engine="openpyxl")
 df_cmp.to_excel(writer, index=False, sheet_name="Por√≥wnanie")
 writer.close()
 st.download_button("‚¨áÔ∏è Pobierz raport Excel", data=out.getvalue(), file_name="porownanie.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
